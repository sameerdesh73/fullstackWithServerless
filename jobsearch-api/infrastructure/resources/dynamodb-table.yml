Resources:
  LeadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.leadsTableName}
      AttributeDefinitions:
        - AttributeName: leadId
          AttributeType: S
        - AttributeName: jobSearchId
          AttributeType: S 
      KeySchema:
        - AttributeName: leadId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: jobSearchIndex
          KeySchema:
            - AttributeName: jobSearchId
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - jobSearchId
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: ${self:custom.tableThroughput}
            WriteCapacityUnits: ${self:custom.tableThroughput}
          # Set the capacity based on the stage
      ProvisionedThroughput:
        ReadCapacityUnits: ${self:custom.tableThroughput}
        WriteCapacityUnits: ${self:custom.tableThroughput}

  JobSearchTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.jobSearchTableName}
      AttributeDefinitions:
        - AttributeName: jobSearchId
          AttributeType: S 
        - AttributeName: userId
          AttributeType: S         
      KeySchema:
        - AttributeName: jobSearchId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: userIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - userId
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: ${self:custom.tableThroughput}
            WriteCapacityUnits: ${self:custom.tableThroughput}
      # Set the capacity based on the stage
      ProvisionedThroughput:
        ReadCapacityUnits: ${self:custom.tableThroughput}
        WriteCapacityUnits: ${self:custom.tableThroughput}